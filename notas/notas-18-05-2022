Base de datos NoSQL

    -> Modelo
    -> MongoDB (Operaciones CRUD)
    -> Muchos ejercicios



Modelo: 

    -> Abs de la realidad en un Obj que podamos almacenar

    REALIDAD #1:

    Producto
        -> Producto de una tienda
            -> Tienda de zapatos

        -> Modelo: 
            Producto: {
                nombre: String,
                marca: String,
                talle: String
            }

    Modelo (Collection) -> Almacenamos en un documento

    REALIDAD #2

    Producto
        -> Producto de una tienda
            -> Tienda Mini-mercado
    
    Categoria
        -> Categorias de una tienda
            -> Tienda Mini-mercado

        -> Modelo 1: 
            Producto: {
                nombre: String, 
                precio: Float,
                cateogoria: Objeto
            }
        
        -> Modelo 2:
            Categoria: {
                nombre: String,
                tipo: String
            }
    


    ---> NO IDEAL

        Modelo Min 1: 
            Producto: {
                nombre: String
            }

        Modelo Min 2:
            Categoria: {
                nombre: String
            }
    
    Obs: No deberia pasar: Modelo 1 = Modelo 2 en mi base de datos
    

    REALIDAD #3: Tienda donde puede comprar un producto un cliente final o empresa

    Modelaodo #1

        Modelo Min Cliente final: 
         Cliente: {
             nombre,
             documento,
             email
         }

         Modelo Min Cliente empresa: 
         ClienteEmpresa: {
             nombre,
             rut,
             email
         }

    Modelado tipado #2: 

        Modelo Min Cliente: 
         Cliente: {
             nombre,
             documento,
             email,
             tipo: ['final','empresa']
         }

    EJERCICIO RAPIDO #1: Tengo una tienda de componentes de PC y el objetivo es hacer el control de stock
    de los componentes. Definir la base de datos minima con sus modelos para resolver el problema.

    Componentes: Cooler, Mother board, Monitor, Mouse, Teclado
    Saber: Entrada - Salida de los componentes de la tienda

    -> Identificar los modelos minimos
    -> Ejemplos


    -> Modelos Minimos: 
        -> Stock (entrada/salida)
        -> Componentes
        
        Modelo Min - Componentes: {
            nombre: String, 
            marca: String,
            cod: String
        }

        Modelo Min - Stock: {
            Componente: Objeto, 
            Cantidad: Float
        }

        Ejemplo de coleccion: Componentes: 

        [
            {
                nombre: "Cooler",
                marca: "XYZ",
                cod: "ABC123"
            },
            {
                nombre: "Motherboard",
                marca: "Gigabyte",
                cod: "GBYT123"
            }
        ]

        Stock: 

        [
            {
                componente: {
                    nombre: "Cooler",
                    marca: "XYZ",
                    cod: "ABC123"
                },
                cantidad: 10
            },
            {
                componente: {
                    nombre: "Cooler",
                    marca: "XYZ",
                    cod: "ABC123"
                },
                cantidad: -5
            }
        ]

        Total de "Cooler" -> 5

        EJERCICIO RAPIDO #2: Se desea construir una app para la asistencia de los alunmnos
        en una clases. Las clases componen a un curso que esta categorizado por: Tecnologia,
        Finanzas, Recursos humanos. Cada clase tiene sus topicos que se van a dictar.

        -> Identificar los modelos min.
        -> Generar un ejemplo

        Modelo Min - Cursos: {
            nombre: String,
            categoria: ['Tecnologia', 'Finanzas', 'Recursos Humanos'],
            clases: Array de Obj
        }

        Modelo Min - Clases: {
            topicos: Array de Obj,
            alumnos: Array de Obj
        }

        Modelo Min - Alumnos: {
            nombre: String, 
            apellido: String,
            email: String
        }

        Ejemplo: 

        Alumnos: [
            {
                nombre: "Alex",
                apellido: "Casadevall",
                email: "lexcasa@gmail.com"
            },
            {
                nombre: "Juan",
                apellido: "Casadevall",
                email: "juan@gmail.com"
            }
        ]

        Cursos: [
            {
                nombre: "Programacion JavaScript",
                categoria: 'Tecnologia',
                clases: [
                    {
                        topicos: [{...}, ...],
                        alumnos: [{...}, ...]
                    },
                    {
                        topicos: [{...}, ...],
                        alumnos: [{...}, ...]
                    },
                    {
                        topicos: [{...}, ...],
                        alumnos: [{...}, ...]
                    }
                ]
            }
        ]

        Clases: [
            {
                topicos: [
                    {nombre: "P. Programacion"},
                    {nombre: "Logica. Programacion"}
                ],
                alumnos: [
                    {
                        nombre: "Alex",
                        apellido: "Casadevall",
                        email: "lexcasa@gmail.com"
                    }
                ]
            },
            {
                topicos: [
                    {nombre: "Iteraciones y control de flujo"},
                    {nombre: "Funciones"}
                ],
                alumnos: [
                    {
                        nombre: "Alex",
                        apellido: "Casadevall",
                        email: "lexcasa@gmail.com"
                    },
                    {
                        nombre: "Juan",
                        apellido: "Casadevall",
                        email: "juan@gmail.com"
                    }
                ]
            }
        ]

    Mongo DB
        -> Crud: Create, Read, Update, Delete

        Modelo: Componentes: {
            nombre: String, 
            marca: String,
            cod: String
        }

        Base de datos: Tienda_PC
            -> Collection: componentes
                -> Create: Insertar un componente (documento JSON) en la base de datos: 
                    
                    {
                        "nombre": "Cooler",
                        "marca": "Cooler master",
                        "cod": "ABC123"
                    }

                db.getCollection('componentes').insertOne({
                        "nombre": "Cooler",
                        "marca": "Cooler master",
                        "cod": "ABC123"
                })

            -> Quiero ver lo que inserte o los documentos que tengo para el collection
                -> Read:  db.getCollection('componentes').find({}) -> Todos los elementos de mi coleccion
                -> Dentro del .find() puedo definir un objeto filtro
                -> Podemos filtrar las columnas que quiero mostrar en el read
                    -> .find({}, {col1: 1, col2: 1, ... colN: 1})

            
            -> Quiero actualizar un componente solo el nombre

                    db.getCollection('componentes').updateOne(
                        {
                                "cod": "ABC123"
                        }, { 
                            $set: {
                                "nombre": "Cooler Edited"
                            }
                        })

            -> Quiero eliminar un documento

                 db.getCollection('componentes').deleteOne({
                     "cod": "ABC123"
                 })